package br.ufrpe.repositorios;

import java.util.ArrayList;

import br.ufrpe.beans.Cliente;
import br.ufrpe.beans.Funcionario;
import br.ufrpe.beans.Pessoa;
import br.ufrpe.dados.IRepositorioPessoa;
import br.ufrpe.expectionsProjeto.ErroAoAtualizarException;
import br.ufrpe.expectionsProjeto.ErroAoRemoverException;
import br.ufrpe.expectionsProjeto.ErroAoSalvarException;
import br.ufrpe.expectionsProjeto.PessoaNaoExisteException;

public class RepositorioPessoa implements IRepositorioPessoa{
	private ArrayList<Pessoa> repositorio;
	private static IRepositorioPessoa unicInstanc;
	
	private RepositorioPessoa(){
		repositorio = new ArrayList<>();
	}
	public static IRepositorioPessoa getInstance(){
		if(unicInstanc == null){
			unicInstanc = new RepositorioPessoa();
		}
		return unicInstanc;
	}
	
	private int buscarIndice(String cpf){
		for(int i = 0; i < this.repositorio.size(); i++){
			if(this.repositorio.get(i).getCpf().equals(cpf)){
				return i;
			}
		}
		return -1;
	}
	
	public void cadastrar(Pessoa pessoa) throws ErroAoSalvarException{
		if(pessoa == null){
			throw new IllegalArgumentException("Erro ao salvar!");
		}else{
			if(!this.repositorio.add(pessoa)){
				throw new ErroAoSalvarException(pessoa);
			}
		}
	}

	public void remover(String cpf) throws ErroAoRemoverException{
		if(cpf == null){
			throw new IllegalArgumentException("CPF inválido!");
		}else{
			int indice = buscarIndice(cpf);
			
			if(indice != -1){
				this.repositorio.remove(indice);
			}else{
				throw new ErroAoRemoverException();
			}
		}
	}
	
	public Pessoa buscar(String cpf) throws PessoaNaoExisteException{
		if(cpf == null){
			throw new IllegalArgumentException("CPF inválido!");
		}else{
			int indice = buscarIndice(cpf);
			
			if(indice != -1){
				return this.repositorio.get(indice);
			}else{
				throw new PessoaNaoExisteException();
			}
		}		
	}
	
	public int sizeFuncionario(){
		int funcionario = 0;
		for(int i = 0; i < size(); i++){
			if(repositorio.get(i) instanceof Funcionario){
				funcionario++;
			}
		}
		return funcionario;
	}
	
	public int sizeCliente(){
		int cliente = 0;
		for(int i = 0; i < size(); i++){
			if(repositorio.get(i) instanceof Cliente){
				cliente++;
			}
		}
		return cliente;
	}
	
	public int size(){
		return repositorio.size();
	}
	public String listar(){
		String res = "";
		for(int i = 0; i < repositorio.size();i++){
			res += repositorio.get(i) + "\n\n";
		}
		return res;
	}
	
	public void atualizar(Pessoa pessoa) throws PessoaNaoExisteException, ErroAoAtualizarException{
		if(pessoa == null){
			throw new IllegalArgumentException("Erro ao atualizar!");
		}else{
			int indice = buscarIndice(pessoa.getCpf());
			
			if(indice == -1){
				throw new PessoaNaoExisteException();
			}else{
				if(pessoa instanceof Funcionario){
					if(((Funcionario) pessoa).getCargo() != null){
						((Funcionario) repositorio.get(indice)).setCargo(((Funcionario) pessoa).getCargo());	
					}if(pessoa.getEnd() != null){
						repositorio.get(indice).setEnd(pessoa.getEnd());
					}if(((Funcionario) pessoa).getSalario() != 0){
						((Funcionario) repositorio.get(indice)).setSalario(((Funcionario) pessoa).getSalario());			
					}
				}else{
					throw new ErroAoAtualizarException();
				}				
			}
		}
	}
}
