package br.ufrpe.repositorios;

import java.util.ArrayList;
import br.ufrpe.dados.IRepositorioAnimal;
import exceptionsProjeto.AnimalJaExisteException;
import exceptionsProjeto.AnimalNaoExisteException;
import exceptionsProjeto.CodigoNaoExisteException;
import br.ufrpe.beans.Animal;

public class RepositorioAnimal implements IRepositorioAnimal {
	private ArrayList<Animal> rep;
	private ArrayList<Animal> lixeira;
	private static IRepositorioAnimal repo;
	
	private RepositorioAnimal(){
		rep = new ArrayList<>();
		lixeira = new ArrayList<>();
	}
	
	public static IRepositorioAnimal getInstance(){
		if (repo == null) {
			repo = new RepositorioAnimal();
		}
		return repo;
	}
	public int buscarIndice(Animal bus) throws AnimalNaoExisteException{
		for(int i = 0; i < rep.size();i++){
			if(rep.get(i).equals(bus)){ //Duvida: deve-se manter esse return dentro do laÃ§o?
				return i;              //Ou eh melhor declarar a variavel i antes do for(-1), e
			}				//usar um if depois dele (if i > -1)
		}				//Como fiz no metodo abaixo:
		String m = "Animal nao existe: "+bus.toString();
		throw new AnimalNaoExisteException(bus, m);
		
	}
	public int buscarIndice(String codigo) throws CodigoNaoExisteException{
		int result = -1;
		
		for(int i = 0; i< rep.size(); i++){
			if(rep.get(i).getCodigo().equals(codigo)){
				result = i;
			}
		}
		if(result == -1){
			String m = "Codigo nao existe: "+codigo;
			throw new CodigoNaoExisteException(codigo, m);
		}
		return result;
	}
	public int size(){
		return rep.size();
	}
	public void adicionar(Animal novo) throws AnimalJaExisteException{
		boolean ok = false;
		if (novo != null) {
			ok = true;
			for (int i = 0; i < rep.size(); i++) {
				if (rep.get(i).equals(novo)) {
					ok = false;
				}
			}
			if (ok) {
				rep.add(novo);		
				for (int i = 0; i < lixeira.size(); i++) {
					if (lixeira.get(i).equals(novo)) {
						lixeira.remove(novo);
					}
				}
			}
			else{
				String m = "Animal Ja Existente: "+novo.getCodigo();
				throw new AnimalJaExisteException(novo,m);
			}
		}
		
	}
	public Animal getPet(int i){
		if(i >=0 && i < rep.size()){
			return this.rep.get(i);			
		}
		return null;
	}
	public boolean remover(Animal antigo) throws AnimalNaoExisteException{
		boolean ok = false;
		int i = buscarIndice(antigo);
		if(i != -1){
			lixeira.add(antigo);
			rep.remove(i);		
			ok = true;
		}
		return ok;
	}
	private void adicionarDireto(Animal novo){
		if(novo != null){
			this.rep.add(novo);
		}
	}
	public boolean atualizar(Animal antigo, Animal novo) throws AnimalJaExisteException, AnimalNaoExisteException{
		boolean ok = false;
		int i = this.buscarIndice(antigo);
		if(i != -1){
			ok = true;
			this.remover(antigo); 
			adicionarDireto(novo);	// o antigo e o novo tem o mesmo codigo, isso nao esta certo
		}
		
		return ok;
	}
	public Animal buscar(String codigo)throws CodigoNaoExisteException{
		Animal a;
		for(int i = 0; i< rep.size(); i++){
			a= rep.get(i);
			if(a.getCodigo() != null && a.getCodigo().equals(codigo)){
		       return a;
			}
		}//Mudar para for reach]
		String m = "Codigo Digitado nao Existe: "+codigo;
		throw new CodigoNaoExisteException(codigo, m);
		
	}
	public boolean remover(String codigo)throws CodigoNaoExisteException{
		
		boolean result = false;
		if(codigo != null){
			int busca = this.buscarIndice(codigo);
			if(busca != -1){
				rep.remove(rep.get(busca));
				result = true;
			}
		}
		return result; //Exception ja eh "throwed" em buscar
	}
	
	public Animal recuperar(String cpf, String raca){
		for (int i = 0; i < lixeira.size(); i++) {
			if (lixeira.get(i).getDonoCPF().equals(cpf) && lixeira.get(i).getRaca().equals(raca)) {
				return lixeira.get(i);
			}
		}
		return null;
	}
	
	public String toString(){
		String animais="";
		for (Animal s: this.rep){
			animais += s+"\n";
		}
		return animais;
	}
}
